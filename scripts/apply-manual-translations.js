const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
function parseTranslationsFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  
  const translations = {};
  let currentGroup = '';
  
  for (const line of lines) {
    const trimmed = line.trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!trimmed) continue;
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ —Ç–∏—Ä–µ: ‚Äî (–¥–ª–∏–Ω–Ω–æ–µ) –∏ - (–æ–±—ã—á–Ω–æ–µ)
    let parts = [];
    if (trimmed.includes('‚Äî')) {
      parts = trimmed.split('‚Äî').map(p => p.trim());
    } else if (trimmed.includes(' - ')) {
      parts = trimmed.split(' - ').map(p => p.trim());
    }
    
    if (parts.length === 2) {
      // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
      const englishName = parts[0].trim();
      const russianName = parts[1].trim();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞)
      translations[englishName.toLowerCase()] = {
        russian: russianName,
        group: currentGroup
      };
    } else if (parts.length === 0 || parts.length === 1) {
      // –≠—Ç–æ –≥—Ä—É–ø–ø–∞ –º—ã—à—Ü (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ç–∏—Ä–µ)
      currentGroup = trimmed;
    }
  }
  
  return translations;
}

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
function normalizeForSearch(name) {
  return name
    .toLowerCase()
    .replace(/\s*\([^)]*\)/g, '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤ —Å–∫–æ–±–∫–∞—Ö
    .replace(/\s+/g, ' ')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
function findTranslation(exerciseName, translations) {
  const lowerName = exerciseName.toLowerCase();
  
  // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (translations[lowerName]) {
    return translations[lowerName].russian;
  }
  
  // 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ —Å–∫–æ–±–æ–∫
  const normalized = normalizeForSearch(exerciseName);
  for (const [key, value] of Object.entries(translations)) {
    if (normalizeForSearch(key) === normalized) {
      return value.russian;
    }
  }
  
  // 3. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±–µ–∑ —É—á–µ—Ç–∞ –¥–µ—Ç–∞–ª–µ–π –≤ —Å–∫–æ–±–∫–∞—Ö)
  const baseName = exerciseName.split('(')[0].trim().toLowerCase();
  for (const [key, value] of Object.entries(translations)) {
    const baseKey = key.split('(')[0].trim();
    if (baseKey === baseName) {
      return value.russian;
    }
  }
  
  return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function applyManualTranslations() {
  const translationsPath = path.join(__dirname, '..', '–ø–µ—Ä–µ–≤–æ–¥.md');
  const inputPath = path.join(__dirname, '..', 'data', 'custom-exercises.json');
  const outputPath = path.join(__dirname, '..', 'data', 'custom-exercises-ru.json');
  
  console.log('üìñ –ß–∏—Ç–∞—é —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑:', translationsPath);
  const translations = parseTranslationsFile(translationsPath);
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(translations).length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
  
  console.log('\nüìñ –ß–∏—Ç–∞—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑:', inputPath);
  const exercises = JSON.parse(fs.readFileSync(inputPath, 'utf8'));
  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n`);
  
  let translatedCount = 0;
  let notFoundCount = 0;
  const notFound = [];
  
  // –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ enum
  const russianToEnglishMuscleGroup = {
    '–ù–æ–≥–∏': 'legs',
    '–°–ø–∏–Ω–∞': 'back',
    '–ü–ª–µ—á–∏': 'shoulders',
    '–†—É–∫–∏': 'arms',
    '–ö–æ—Ä': 'abs',
    '–ö–∞—Ä–¥–∏–æ': 'cardio',
    '–ì—Ä—É–¥—å': 'chest',
    '–í—Å–µ —Ç–µ–ª–æ': 'fullBody',
    '–û–ª–∏–º–ø–∏–π—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è': 'fullBody',
    '–î—Ä—É–≥–æ–µ': 'other'
  };

  // –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ enum
  const russianToEnglishEquipment = {
    '–®—Ç–∞–Ω–≥–∞': 'barbell',
    '–ì–∞–Ω—Ç–µ–ª–∏': 'dumbbell',
    '–ì–∞–Ω—Ç–µ–ª—å': 'dumbbell',
    '–ì–∏—Ä—è': 'kettlebell',
    '–ö–∞–±–µ–ª—å': 'cable',
    '–¢—Ä–µ–Ω–∞–∂–µ—Ä': 'machine',
    '–†–µ–∑–∏–Ω–∫–∞': 'bands',
    '–†–µ–∑–∏–Ω–∫–æ–π': 'bands',
    '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å': 'bodyweight',
    'Bodyweight': 'bodyweight',
    '–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': 'bodyweight',
    '–ú–∞—à–∏–Ω–∞ –°–º–∏—Ç–∞': 'machine',
    '–°–º–∏—Ç': 'machine'
  };

  const translatedExercises = exercises.map((exercise, index) => {
    const translation = findTranslation(exercise.name, translations);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º muscleGroup –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    let muscleGroupEnum = exercise.muscleGroup;
    if (typeof exercise.muscleGroup === 'string' && russianToEnglishMuscleGroup[exercise.muscleGroup]) {
      muscleGroupEnum = russianToEnglishMuscleGroup[exercise.muscleGroup];
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º equipment –µ—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    let equipmentEnum = exercise.equipment;
    if (Array.isArray(exercise.equipment)) {
      equipmentEnum = exercise.equipment.map(eq => {
        if (russianToEnglishEquipment[eq]) {
          return russianToEnglishEquipment[eq];
        }
        return eq.toLowerCase();
      });
    }
    
    if (translation) {
      translatedCount++;
      if ((index + 1) % 10 === 0) {
        console.log(`‚úÖ ${index + 1}/${exercises.length}: ${exercise.name} ‚Üí ${translation}`);
      }
      return {
        ...exercise,
        name: translation,
        nameEn: exercise.name,
        muscleGroup: muscleGroupEnum,
        equipment: equipmentEnum
      };
    } else {
      notFoundCount++;
      notFound.push(exercise.name);
      console.log(`‚ö†Ô∏è  ${index + 1}/${exercises.length}: ${exercise.name} - –ü–ï–†–ï–í–û–î –ù–ï –ù–ê–ô–î–ï–ù`);
      return {
        ...exercise,
        nameEn: exercise.name,
        muscleGroup: muscleGroupEnum,
        equipment: equipmentEnum
        // –û—Å—Ç–∞–≤–ª—è–µ–º name –∫–∞–∫ –µ—Å—Ç—å
      };
    }
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  fs.writeFileSync(outputPath, JSON.stringify(translatedExercises, null, 2), 'utf8');
  
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputPath}`);
  console.log(`üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${translatedCount} –∏–∑ ${exercises.length}`);
  console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${notFoundCount}`);
  
  if (notFound.length > 0) {
    console.log('\nüìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞:');
    notFound.forEach(name => console.log(`   - ${name}`));
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤:');
  for (let i = 0; i < Math.min(10, translatedExercises.length); i++) {
    if (translatedExercises[i].nameEn && translatedExercises[i].name !== translatedExercises[i].nameEn) {
      console.log(`   ${translatedExercises[i].nameEn}`);
      console.log(`   ‚Üí ${translatedExercises[i].name}`);
      console.log('');
    }
  }
  
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

applyManualTranslations().catch(console.error);

