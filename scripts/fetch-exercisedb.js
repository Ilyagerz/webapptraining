/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ ExerciseDB API v1
 * –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/fetch-exercisedb.js
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è ExerciseDB API v1
const BASE_URL = 'https://exercisedb.p.rapidapi.com';

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const TRANSLATIONS = {
  // –ì—Ä—É–ø–ø—ã –º—ã—à—Ü
  'chest': '–ì—Ä—É–¥—å',
  'back': '–°–ø–∏–Ω–∞',
  'shoulders': '–ü–ª–µ—á–∏',
  'biceps': '–ë–∏—Ü–µ–ø—Å',
  'triceps': '–¢—Ä–∏—Ü–µ–ø—Å',
  'legs': '–ù–æ–≥–∏',
  'abs': '–ü—Ä–µ—Å—Å',
  'glutes': '–Ø–≥–æ–¥–∏—Ü—ã',
  'quads': '–ö–≤–∞–¥—Ä–∏—Ü–µ–ø—Å—ã',
  'hamstrings': '–ë–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞',
  'calves': '–ò–∫—Ä—ã',
  'forearms': '–ü—Ä–µ–¥–ø–ª–µ—á—å—è',
  'traps': '–¢—Ä–∞–ø–µ—Ü–∏–∏',
  'lats': '–®–∏—Ä–æ—á–∞–π—à–∏–µ',
  'lower back': '–ü–æ—è—Å–Ω–∏—Ü–∞',
  'upper back': '–í–µ—Ä—Ö —Å–ø–∏–Ω—ã',
  'middle back': '–°–µ—Ä–µ–¥–∏–Ω–∞ —Å–ø–∏–Ω—ã',
  'cardio': '–ö–∞—Ä–¥–∏–æ',
  'neck': '–®–µ—è',
  'adductors': '–ü—Ä–∏–≤–æ–¥—è—â–∏–µ',
  'abductors': '–û—Ç–≤–æ–¥—è—â–∏–µ',
  
  // –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞ (bodyParts)
  'upper arms': '–†—É–∫–∏ (–≤–µ—Ä—Ö)',
  'lower arms': '–†—É–∫–∏ (–Ω–∏–∑)',
  'upper legs': '–ù–æ–≥–∏ (–≤–µ—Ä—Ö)',
  'lower legs': '–ù–æ–≥–∏ (–Ω–∏–∑)',
  'waist': '–¢–∞–ª–∏—è',
  
  // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  'barbell': '–®—Ç–∞–Ω–≥–∞',
  'dumbbell': '–ì–∞–Ω—Ç–µ–ª–∏',
  'cable': '–ö–∞–±–µ–ª—å',
  'machine': '–¢—Ä–µ–Ω–∞–∂–µ—Ä',
  'body weight': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
  'assisted': '–° –ø–æ–º–æ—â—å—é',
  'band': '–†–µ–∑–∏–Ω–∫–∞',
  'medicine ball': '–ú–µ–¥–±–æ–ª',
  'stability ball': '–§–∏—Ç–±–æ–ª',
  'kettlebell': '–ì–∏—Ä—è',
  'ez barbell': 'EZ-—à—Ç–∞–Ω–≥–∞',
  'trap bar': '–¢—Ä—ç–ø-–≥—Ä–∏—Ñ',
  'smith machine': '–ú–∞—à–∏–Ω–∞ –°–º–∏—Ç–∞',
  'leverage machine': '–†—ã—á–∞–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä',
  'rope': '–ö–∞–Ω–∞—Ç',
  'skierg machine': '–õ—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä',
  'sled machine': '–°–∞–Ω–∏',
  'upper body ergometer': '–≠—Ä–≥–æ–º–µ—Ç—Ä –¥–ª—è –≤–µ—Ä—Ö–∞ —Ç–µ–ª–∞',
  'elliptical machine': '–≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä',
  'stationary bike': '–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä',
  'roller': '–†–æ–ª–∏–∫',
  'wheel roller': '–ö–æ–ª–µ—Å–æ-—Ä–æ–ª–∏–∫',
  'resistance band': '–≠—Å–ø–∞–Ω–¥–µ—Ä',
  'bosu ball': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ BOSU',
  'weighted': '–° –æ—Ç—è–≥–æ—â–µ–Ω–∏–µ–º',
  'tire': '–ü–æ–∫—Ä—ã—à–∫–∞',
  
  // –û–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
  'push': '–∂–∏–º',
  'pull': '—Ç—è–≥–∞',
  'press': '–∂–∏–º',
  'curl': '—Å–≥–∏–±–∞–Ω–∏–µ',
  'raise': '–ø–æ–¥—ä–µ–º',
  'fly': '—Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
  'row': '—Ç—è–≥–∞',
  'squat': '–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ',
  'lunge': '–≤—ã–ø–∞–¥',
  'deadlift': '—Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞',
  'bench': '–ª–µ–∂–∞',
  'incline': '–Ω–∞–∫–ª–æ–Ω–Ω—ã–π',
  'decline': '–æ–±—Ä–∞—Ç–Ω—ã–π –Ω–∞–∫–ª–æ–Ω',
  'flat': '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π',
  'standing': '—Å—Ç–æ—è',
  'seated': '—Å–∏–¥—è',
  'lying': '–ª–µ–∂–∞',
  'kneeling': '–Ω–∞ –∫–æ–ª–µ–Ω—è—Ö',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    https.get(url, options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          resolve(data);
        }
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (GIF)
function downloadFile(url, filepath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filepath);
    
    const protocol = url.startsWith('https') ? https : require('http');
    
    protocol.get(url, (response) => {
      // –°–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
      if (response.statusCode >= 300 && response.statusCode < 400 && response.headers.location) {
        downloadFile(response.headers.location, filepath)
          .then(resolve)
          .catch(reject);
        return;
      }
      
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download: ${response.statusCode}`));
        return;
      }
      
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(filepath, () => {});
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function translateText(text) {
  if (!text) return text;
  
  let translated = text.toLowerCase();
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
  Object.keys(TRANSLATIONS).forEach(key => {
    const regex = new RegExp(key, 'gi');
    translated = translated.replace(regex, TRANSLATIONS[key]);
  });
  
  // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
  return translated.charAt(0).toUpperCase() + translated.slice(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–∞—Å—Å–∏–≤–∞
function translateArray(arr) {
  if (!Array.isArray(arr)) return arr;
  return arr.map(item => {
    const key = item.toLowerCase();
    return TRANSLATIONS[key] || item;
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fetchExercises() {
  console.log('üèãÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ ExerciseDB API...\n');
  
  try {
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ExerciseDB API –Ω—É–∂–µ–Ω API –∫–ª—é—á –æ—Ç RapidAPI
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ mock –¥–∞–Ω–Ω—ã–µ
    
    console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å ExerciseDB API v1 —á–µ—Ä–µ–∑ RapidAPI –Ω—É–∂–µ–Ω API –∫–ª—é—á.');
    console.log('üì¶ –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Ö GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.\n');
    
    // URL –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–∞–Ω–Ω—ã–º ExerciseDB –Ω–∞ GitHub
    const GITHUB_RAW_URL = 'https://raw.githubusercontent.com/yuhonas/free-exercise-db/main/dist/exercises.json';
    
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å GitHub...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const exercises = await makeRequest(GITHUB_RAW_URL);
    
    if (!Array.isArray(exercises)) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π');
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    const processedExercises = exercises.map((exercise, index) => {
      if ((index + 1) % 100 === 0) {
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${index + 1}/${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...`);
      }
      
      return {
        id: exercise.id || `exercise-${index}`,
        name: translateText(exercise.name),
        originalName: exercise.name,
        muscleGroup: translateArray(exercise.primaryMuscles || exercise.target || []).join(', '),
        secondaryMuscles: translateArray(exercise.secondaryMuscles || []),
        equipment: translateArray(exercise.equipment ? [exercise.equipment] : []).join(', ') || '–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        bodyParts: translateArray(exercise.bodyPart ? [exercise.bodyPart] : []),
        description: `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è ${translateArray(exercise.primaryMuscles || []).join(', ')}`,
        instructions: exercise.instructions || [],
        gifUrl: exercise.images?.[0] || '',
        difficulty: exercise.level || 'intermediate',
        category: exercise.category || 'strength',
        force: exercise.force || null,
        mechanic: exercise.mechanic || null,
      };
    });
    
    console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedExercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const dataDir = path.join(__dirname, '..', 'data');
    const gifsDir = path.join(__dirname, '..', 'public', 'exercises', 'gifs');
    
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
    
    if (!fs.existsSync(gifsDir)) {
      fs.mkdirSync(gifsDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${gifsDir}\n`);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º GIF —Ñ–∞–π–ª—ã
    console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É GIF –∞–Ω–∏–º–∞—Ü–∏–π...\n');
    
    let downloadedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < processedExercises.length; i++) {
      const exercise = processedExercises[i];
      
      if ((i + 1) % 50 === 0) {
        console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${downloadedCount} GIF —Ñ–∞–π–ª–æ–≤ (${i + 1}/${processedExercises.length})...`);
      }
      
      if (!exercise.gifUrl) {
        skippedCount++;
        continue;
      }
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        const urlParts = exercise.gifUrl.split('/');
        const originalFilename = urlParts[urlParts.length - 1];
        const extension = originalFilename.includes('.gif') ? '.gif' : '.gif';
        const filename = `${exercise.id}${extension}`;
        const filepath = path.join(gifsDir, filename);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (fs.existsSync(filepath)) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
          exercise.gifUrl = `/exercises/gifs/${filename}`;
          exercise.gifUrlOriginal = exercise.gifUrl;
          skippedCount++;
          continue;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        await downloadFile(exercise.gifUrl, filepath);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π
        exercise.gifUrlOriginal = exercise.gifUrl;
        exercise.gifUrl = `/exercises/gifs/${filename}`;
        
        downloadedCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GIF –¥–ª—è ${exercise.name}: ${error.message}`);
        errorCount++;
        // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ GIF:`);
    console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${downloadedCount}`);
    console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skippedCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const outputPath = path.join(dataDir, 'exercises-full.json');
    fs.writeFileSync(outputPath, JSON.stringify(processedExercises, null, 2), 'utf-8');
    
    console.log(`üíæ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}\n`);
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const simplifiedExercises = processedExercises.map(ex => ({
      id: ex.id,
      name: ex.name,
      muscleGroup: ex.muscleGroup,
      equipment: ex.equipment,
      gifUrl: ex.gifUrl,
    }));
    
    const simplifiedPath = path.join(dataDir, 'exercises-simplified.json');
    fs.writeFileSync(simplifiedPath, JSON.stringify(simplifiedExercises, null, 2), 'utf-8');
    
    console.log(`üíæ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${simplifiedPath}\n`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    const muscleGroups = {};
    const equipmentTypes = {};
    
    processedExercises.forEach(ex => {
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
      const muscle = ex.muscleGroup;
      muscleGroups[muscle] = (muscleGroups[muscle] || 0) + 1;
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
      const equip = ex.equipment;
      equipmentTypes[equip] = (equipmentTypes[equip] || 0) + 1;
    });
    
    console.log('\n–ì—Ä—É–ø–ø—ã –º—ã—à—Ü:');
    Object.entries(muscleGroups)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([muscle, count]) => {
        console.log(`  ${muscle}: ${count}`);
      });
    
    console.log('\n–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:');
    Object.entries(equipmentTypes)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([equip, count]) => {
        console.log(`  ${equip}: ${count}`);
      });
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.\n');
    
    console.log('üìù –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É, –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª lib/exercises-data.ts\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:', error.message);
    process.exit(1);
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ExerciseDB API —á–µ—Ä–µ–∑ RapidAPI
async function fetchFromRapidAPI(apiKey) {
  console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º RapidAPI ExerciseDB...\n');
  
  const options = {
    method: 'GET',
    headers: {
      'X-RapidAPI-Key': apiKey,
      'X-RapidAPI-Host': 'exercisedb.p.rapidapi.com'
    }
  };
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...');
    const exercises = await makeRequest(`${BASE_URL}/exercises?limit=1500`, options);
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
    const processedExercises = exercises.map((exercise) => ({
      id: exercise.id,
      name: translateText(exercise.name),
      originalName: exercise.name,
      muscleGroup: translateArray([exercise.target]).join(', '),
      secondaryMuscles: translateArray(exercise.secondaryMuscles || []),
      equipment: translateArray([exercise.equipment]).join(', '),
      bodyParts: translateArray([exercise.bodyPart]),
      description: `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è ${translateArray([exercise.target]).join(', ')}`,
      instructions: exercise.instructions || [],
      gifUrl: exercise.gifUrl || '',
      difficulty: 'intermediate',
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    const dataDir = path.join(__dirname, '..', 'data');
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
    
    const outputPath = path.join(dataDir, 'exercises-rapidapi.json');
    fs.writeFileSync(outputPath, JSON.stringify(processedExercises, null, 2), 'utf-8');
    
    console.log(`üíæ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}\n`);
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å RapidAPI:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--rapidapi') || args.includes('-r')) {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RapidAPI
    const apiKeyIndex = args.findIndex(arg => arg === '--api-key' || arg === '-k');
    const apiKey = apiKeyIndex >= 0 ? args[apiKeyIndex + 1] : process.env.RAPIDAPI_KEY;
    
    if (!apiKey) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ù—É–∂–µ–Ω API –∫–ª—é—á –æ—Ç RapidAPI');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/fetch-exercisedb.js --rapidapi --api-key YOUR_KEY');
      console.log('–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: RAPIDAPI_KEY=YOUR_KEY');
      process.exit(1);
    }
    
    fetchFromRapidAPI(apiKey);
  } else {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    fetchExercises();
  }
}

module.exports = { fetchExercises, fetchFromRapidAPI, translateText };

