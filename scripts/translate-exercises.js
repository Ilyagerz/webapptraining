/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ translations.json
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const translationsPath = path.join(__dirname, 'translations.json');
const translations = JSON.parse(fs.readFileSync(translationsPath, 'utf-8'));

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞—Ä—å
 */
function translateText(text, context = 'general') {
  if (!text) return text;
  
  const lowerText = text.toLowerCase().trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
  const categories = [
    'exerciseNames',
    'muscleGroups',
    'bodyParts',
    'equipment',
    'positions',
    'difficulty',
    'category',
    'force',
    'mechanic',
  ];
  
  for (const category of categories) {
    if (translations[category] && translations[category][lowerText]) {
      return translations[category][lowerText];
    }
  }
  
  // –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–ª–æ–≤
  let result = lowerText;
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Object.values(translations).forEach(categoryDict => {
    Object.entries(categoryDict).forEach(([eng, rus]) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
      const regex = new RegExp(`\\b${eng}\\b`, 'gi');
      result = result.replace(regex, rus);
    });
  });
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  result = result.replace(/\s+/g, ' ').trim();
  
  // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
  if (result) {
    result = result.charAt(0).toUpperCase() + result.slice(1);
  }
  
  return result;
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
 */
function translateArray(arr) {
  if (!Array.isArray(arr)) return arr;
  return arr.map(item => translateText(item));
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ —É–º–Ω–æ
 */
function translateExerciseName(name) {
  if (!name) return name;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  const lowerName = name.toLowerCase();
  if (translations.exerciseNames[lowerName]) {
    return translations.exerciseNames[lowerName];
  }
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é
  let parts = name.toLowerCase().split(/[\s-]+/);
  let translatedParts = [];
  
  for (let part of parts) {
    let translated = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    for (let category of Object.keys(translations)) {
      if (translations[category][part]) {
        translatedParts.push(translations[category][part]);
        translated = true;
        break;
      }
    }
    
    if (!translated) {
      translatedParts.push(part);
    }
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  let result = translatedParts.join(' ');
  
  // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
  result = result.charAt(0).toUpperCase() + result.slice(1);
  
  return result;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
 */
function translateExercise(exercise) {
  const translated = {
    id: exercise.id,
    name: translateExerciseName(exercise.name),
    originalName: exercise.name,
  };
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—É –º—ã—à—Ü
  if (exercise.target) {
    translated.muscleGroup = translateText(exercise.target);
  } else if (exercise.primaryMuscles) {
    translated.muscleGroup = translateArray(exercise.primaryMuscles).join(', ');
  } else if (exercise.muscleGroup) {
    translated.muscleGroup = translateText(exercise.muscleGroup);
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ç–æ—Ä–∏—á–Ω—ã–µ –º—ã—à—Ü—ã
  if (exercise.secondaryMuscles) {
    translated.secondaryMuscles = translateArray(exercise.secondaryMuscles);
  } else if (exercise.synergists) {
    translated.secondaryMuscles = translateArray(exercise.synergists);
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  if (exercise.equipment) {
    if (Array.isArray(exercise.equipment)) {
      translated.equipment = translateArray(exercise.equipment).join(', ');
    } else {
      translated.equipment = translateText(exercise.equipment);
    }
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
  if (exercise.bodyPart) {
    if (Array.isArray(exercise.bodyPart)) {
      translated.bodyParts = translateArray(exercise.bodyPart);
    } else {
      translated.bodyParts = [translateText(exercise.bodyPart)];
    }
  }
  
  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  if (exercise.instructions) {
    if (Array.isArray(exercise.instructions)) {
      translated.instructions = exercise.instructions;
    } else {
      translated.instructions = [exercise.instructions];
    }
  }
  
  // –û–ø–∏—Å–∞–Ω–∏–µ
  if (exercise.description) {
    translated.description = exercise.description;
  } else if (translated.muscleGroup) {
    translated.description = `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è ${translated.muscleGroup}`;
  }
  
  // GIF URL
  if (exercise.gifUrl) {
    translated.gifUrl = exercise.gifUrl;
  } else if (exercise.images && exercise.images.length > 0) {
    translated.gifUrl = exercise.images[0];
  }
  
  // –°–ª–æ–∂–Ω–æ—Å—Ç—å
  if (exercise.level) {
    translated.difficulty = translateText(exercise.level, 'difficulty');
  } else if (exercise.difficulty) {
    translated.difficulty = translateText(exercise.difficulty, 'difficulty');
  } else {
    translated.difficulty = '–°—Ä–µ–¥–Ω–∏–π';
  }
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  if (exercise.category) {
    translated.category = translateText(exercise.category, 'category');
  }
  
  // –¢–∏–ø —Å–∏–ª—ã
  if (exercise.force) {
    translated.force = translateText(exercise.force, 'force');
  }
  
  // –ú–µ—Ö–∞–Ω–∏–∫–∞
  if (exercise.mechanic) {
    translated.mechanic = translateText(exercise.mechanic, 'mechanic');
  }
  
  return translated;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...\n');
  
  try {
    // –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    const inputPath = process.argv[2] || path.join(__dirname, '..', 'data', 'exercises.json');
    
    if (!fs.existsSync(inputPath)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputPath}`);
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/translate-exercises.js [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]');
      process.exit(1);
    }
    
    console.log(`üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${inputPath}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const data = fs.readFileSync(inputPath, 'utf-8');
    const exercises = JSON.parse(data);
    
    if (!Array.isArray(exercises)) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π');
      process.exit(1);
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º
    console.log('üåç –ü–µ—Ä–µ–≤–æ–¥–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...\n');
    const translatedExercises = [];
    
    for (let i = 0; i < exercises.length; i++) {
      if ((i + 1) % 100 === 0) {
        console.log(`   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${i + 1}/${exercises.length}...`);
      }
      
      const translated = translateExercise(exercises[i]);
      translatedExercises.push(translated);
    }
    
    console.log(`\n‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${translatedExercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputPath = inputPath.replace('.json', '-translated.json');
    fs.writeFileSync(outputPath, JSON.stringify(translatedExercises, null, 2), 'utf-8');
    
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}\n`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:\n');
    
    // –ì—Ä—É–ø–ø—ã –º—ã—à—Ü
    const muscleGroups = new Set();
    translatedExercises.forEach(ex => {
      if (ex.muscleGroup) muscleGroups.add(ex.muscleGroup);
    });
    
    console.log(`–ì—Ä—É–ø–ø –º—ã—à—Ü: ${muscleGroups.size}`);
    console.log('–¢–æ–ø-10 –≥—Ä—É–ø–ø:');
    const muscleCount = {};
    translatedExercises.forEach(ex => {
      const muscle = ex.muscleGroup;
      muscleCount[muscle] = (muscleCount[muscle] || 0) + 1;
    });
    Object.entries(muscleCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([muscle, count]) => {
        console.log(`  ${muscle}: ${count}`);
      });
    
    // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    console.log('\n–¢–æ–ø-10 –≤–∏–¥–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:');
    const equipmentCount = {};
    translatedExercises.forEach(ex => {
      const equipment = ex.equipment;
      equipmentCount[equipment] = (equipmentCount[equipment] || 0) + 1;
    });
    Object.entries(equipmentCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([equipment, count]) => {
        console.log(`  ${equipment}: ${count}`);
      });
    
    // –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n');
    translatedExercises.slice(0, 5).forEach(ex => {
      console.log(`  ${ex.originalName} ‚Üí ${ex.name}`);
    });
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = {
  translateText,
  translateArray,
  translateExerciseName,
  translateExercise,
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

