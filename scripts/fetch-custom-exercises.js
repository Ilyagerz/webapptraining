const https = require('https');
const fs = require('fs');
const path = require('path');

const API_BASE_URL = 'www.exercisedb.dev';
const OUTPUT_JSON = path.join(__dirname, '..', 'data', 'custom-exercises.json');
const GIFS_DIR = path.join(__dirname, '..', 'public', 'exercises', 'gifs');

// –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const muscleGroupMap = {
  'pectoralis': '–ì—Ä—É–¥—å',
  'chest': '–ì—Ä—É–¥—å',
  'lats': '–°–ø–∏–Ω–∞',
  'spine': '–°–ø–∏–Ω–∞',
  'traps': '–°–ø–∏–Ω–∞',
  'upper back': '–°–ø–∏–Ω–∞',
  'lower back': '–°–ø–∏–Ω–∞',
  'back': '–°–ø–∏–Ω–∞',
  'delts': '–ü–ª–µ—á–∏',
  'shoulders': '–ü–ª–µ—á–∏',
  'quads': '–ù–æ–≥–∏',
  'glutes': '–ù–æ–≥–∏',
  'hamstrings': '–ù–æ–≥–∏',
  'calves': '–ù–æ–≥–∏',
  'legs': '–ù–æ–≥–∏',
  'biceps': '–†—É–∫–∏',
  'triceps': '–†—É–∫–∏',
  'forearms': '–†—É–∫–∏',
  'arms': '–†—É–∫–∏',
  'abs': '–ü—Ä–µ—Å—Å',
  'obliques': '–ü—Ä–µ—Å—Å',
  'cardiovascular': '–ö–∞—Ä–¥–∏–æ',
};

const equipmentMap = {
  'barbell': '–®—Ç–∞–Ω–≥–∞',
  'dumbbell': '–ì–∞–Ω—Ç–µ–ª–∏',
  'machine': '–¢—Ä–µ–Ω–∞–∂–µ—Ä',
  'cable': '–ö–∞–±–µ–ª—å',
  'body weight': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
  'bodyweight': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
  'kettlebell': '–ì–∏—Ä—è',
  'band': '–†–µ–∑–∏–Ω–∫–∞',
  'resistance band': '–†–µ–∑–∏–Ω–∫–∞',
};

function downloadFile(url, dest) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest);
    
    https.get(url, (response) => {
      if (response.statusCode === 301 || response.statusCode === 302) {
        // –°–ª–µ–¥—É–µ–º –∑–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
        return downloadFile(response.headers.location, dest)
          .then(resolve)
          .catch(reject);
      }

      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}`));
        return;
      }

      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(dest, () => {}); // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
      reject(err);
    });
  });
}

async function fetchExercise(exerciseId) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: API_BASE_URL,
      path: `/api/v1/exercises/${exerciseId}`,
      method: 'GET',
      headers: { 'Accept': 'application/json' }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            resolve(JSON.parse(data));
          } catch (error) {
            reject(new Error(`Parse error: ${error.message}`));
          }
        } else {
          reject(new Error(`HTTP ${res.statusCode}`));
        }
      });
    });

    req.on('error', reject);
    req.setTimeout(30000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
    req.end();
  });
}

function translateMuscleGroup(muscles) {
  if (!muscles || muscles.length === 0) return '–ì—Ä—É–¥—å';
  const muscle = muscles[0].toLowerCase();
  for (const [key, value] of Object.entries(muscleGroupMap)) {
    if (muscle.includes(key)) return value;
  }
  return '–î—Ä—É–≥–æ–µ';
}

function translateEquipment(equipment) {
  if (!equipment) return '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å';
  const eq = equipment.toLowerCase();
  for (const [key, value] of Object.entries(equipmentMap)) {
    if (eq.includes(key)) return value;
  }
  return '–î—Ä—É–≥–æ–µ';
}

async function main() {
  try {
    // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    const listFile = process.argv[2] || path.join(__dirname, 'exercise-ids.txt');
    
    let exerciseIds = [];
    
    if (fs.existsSync(listFile)) {
      const content = fs.readFileSync(listFile, 'utf-8');
      exerciseIds = content.split('\n')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('#'));
      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ ${exerciseIds.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ ${listFile}`);
    } else {
      console.log('‚ö†Ô∏è  –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
      console.log(`   node scripts/fetch-custom-exercises.js <–ø—É—Ç—å-–∫-—Ñ–∞–π–ª—É.txt>`);
      console.log('\n–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (–ø–æ –æ–¥–Ω–æ–º—É ID –Ω–∞ —Å—Ç—Ä–æ–∫—É):');
      console.log('VPPtusI');
      console.log('K6NnTv0');
      console.log('# –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å #');
      process.exit(1);
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    if (!fs.existsSync(GIFS_DIR)) {
      fs.mkdirSync(GIFS_DIR, { recursive: true });
    }

    console.log('\nüèãÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...\n');

    const results = [];
    let success = 0;
    let failed = 0;

    for (let i = 0; i < exerciseIds.length; i++) {
      const id = exerciseIds[i];
      process.stdout.write(`[${i + 1}/${exerciseIds.length}] ${id}...`);

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const response = await fetchExercise(id);
        
        if (!response.success || !response.data) {
          console.log(' ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');
          failed++;
          continue;
        }

        const exercise = response.data;
        
        // –°–∫–∞—á–∏–≤–∞–µ–º GIF
        let gifPath = '';
        if (exercise.gifUrl) {
          const gifFilename = `${exercise.exerciseId}.gif`;
          const gifFullPath = path.join(GIFS_DIR, gifFilename);
          
          if (!fs.existsSync(gifFullPath)) {
            await downloadFile(exercise.gifUrl, gifFullPath);
          }
          
          gifPath = `/exercises/gifs/${gifFilename}`;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const formatted = {
          id: exercise.exerciseId,
          name: exercise.name,
          nameEn: exercise.name,
          category: 'strength',
          muscleGroup: translateMuscleGroup(exercise.targetMuscles),
          equipment: Array.isArray(exercise.equipments) 
            ? exercise.equipments.map(translateEquipment)
            : [translateEquipment(exercise.equipments?.[0])],
          instructions: exercise.instructions || [],
          gifUrl: gifPath,
          targetMuscles: exercise.targetMuscles || [],
          secondaryMuscles: exercise.secondaryMuscles || [],
          bodyParts: exercise.bodyParts || [],
          description: `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è ${translateMuscleGroup(exercise.targetMuscles)}`,
          isCustom: false,
        };

        results.push(formatted);
        console.log(` ‚úÖ ${exercise.name}`);
        success++;

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.log(` ‚ùå ${error.message}`);
        failed++;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs.writeFileSync(OUTPUT_JSON, JSON.stringify(results, null, 2), 'utf-8');

    console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ!`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${success}`);
    console.log(`   –û—à–∏–±–æ–∫: ${failed}`);
    console.log(`   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${OUTPUT_JSON}`);
    console.log(`   GIF —Ñ–∞–π–ª—ã: ${GIFS_DIR}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const groups = {};
    results.forEach(e => {
      groups[e.muscleGroup] = (groups[e.muscleGroup] || 0) + 1;
    });

    console.log('\nüìä –ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü:');
    Object.entries(groups)
      .sort((a, b) => b[1] - a[1])
      .forEach(([group, count]) => {
        console.log(`   ${group}: ${count}`);
      });

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();

