#!/usr/bin/env node

/**
 * ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä GIF –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
 * 
 * –ß–∏—Ç–∞–µ—Ç custom-exercises-ru.json –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç GIF –∏–∑ ExerciseDB
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   npm run exercises:auto-match-gifs
 */

const fs = require('fs');
const path = require('path');

const EXERCISES_FILE = path.join(__dirname, '../data/custom-exercises-ru.json');
const DB_FILE = path.join(__dirname, '../data/exercisedb-gifs.json');
const OUTPUT_FILE = path.join(__dirname, '../data/custom-exercises-ru-with-gifs.json');

if (!fs.existsSync(DB_FILE)) {
  console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ExerciseDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  console.log('\nüí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:');
  console.log('   npm run exercises:fetch-gifs');
  process.exit(1);
}

if (!fs.existsSync(EXERCISES_FILE)) {
  console.error('‚ùå –§–∞–π–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', EXERCISES_FILE);
  process.exit(1);
}

try {
  const exercises = JSON.parse(fs.readFileSync(EXERCISES_FILE, 'utf-8'));
  const db = JSON.parse(fs.readFileSync(DB_FILE, 'utf-8'));

  console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä GIF...\n');
  console.log(`üìä –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${exercises.length}`);
  console.log(`üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${db.exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);

  let matched = 0;
  let skipped = 0;
  let notFound = 0;

  const updatedExercises = exercises.map(ex => {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å GIF, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (ex.gifUrl && ex.gifUrl.trim() !== '') {
      skipped++;
      return ex;
    }

    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    const nameEn = (ex.nameEn || ex.name).toLowerCase().trim();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    let match = db.exercises.find(dbEx => 
      dbEx.name.toLowerCase() === nameEn
    );

    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (!match) {
      match = db.exercises.find(dbEx => 
        dbEx.name.toLowerCase().includes(nameEn) ||
        nameEn.includes(dbEx.name.toLowerCase())
      );
    }

    if (match) {
      matched++;
      console.log(`‚úÖ ${ex.name}`);
      console.log(`   ‚Üí ${match.name}`);
      console.log(`   ‚Üí ${match.gifUrl}\n`);
      
      return {
        ...ex,
        gifUrl: match.gifUrl
      };
    } else {
      notFound++;
      console.log(`‚ùå ${ex.name} (${ex.nameEn})`);
      console.log(`   ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n`);
      return ex;
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(updatedExercises, null, 2), 'utf-8');

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ GIF:        ${matched} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
  console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–µ—Å—Ç—å):  ${skipped} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
  console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ:         ${notFound} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
  console.log(`üìù –í—Å–µ–≥–æ:              ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${OUTPUT_FILE}`);
  
  if (notFound > 0) {
    console.log('\nüí° –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –±–µ–∑ GIF –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:');
    console.log('   1. npm run exercises:search-gif "–Ω–∞–∑–≤–∞–Ω–∏–µ"');
    console.log('   2. –ü–æ–¥–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ—Ö–æ–∂–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ');
    console.log('   3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π GIF –≤ /public/exercises/gifs/');
  }

  console.log('\n‚ú® –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª:');
  console.log(`   cp ${OUTPUT_FILE} ${EXERCISES_FILE}`);

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}

