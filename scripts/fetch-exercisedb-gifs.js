#!/usr/bin/env node

/**
 * üé¨ –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ GIF –∏–∑ ExerciseDB API
 * 
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª data/exercisedb-gifs.json —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   npm run exercises:fetch-gifs
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 *   - –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ RapidAPI
 *   - API –∫–ª—é—á –≤ .env.local (RAPIDAPI_KEY)
 */

const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: '.env.local' });

const RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;
const OUTPUT_FILE = path.join(__dirname, '../data/exercisedb-gifs.json');

if (!RAPIDAPI_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: RAPIDAPI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
  console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
  console.log('1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://rapidapi.com/');
  console.log('2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ExerciseDB API (Free –ø–ª–∞–Ω)');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('4. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: RAPIDAPI_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å');
  process.exit(1);
}

async function fetchAllExercises() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ ExerciseDB...\n');

  try {
    const response = await fetch('https://exercisedb.p.rapidapi.com/exercises?limit=0&offset=0', {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': RAPIDAPI_KEY,
        'X-RapidAPI-Host': 'exercisedb.p.rapidapi.com'
      }
    });

    if (!response.ok) {
      if (response.status === 451) {
        console.error('‚ùå HTTP 451: –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Å–∞–Ω–∫—Ü–∏–∏)');
        console.log('\nüí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–ª–∏ –≥–æ—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        process.exit(1);
      }
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const exercises = await response.json();
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
    console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedExercises = exercises.map(ex => ({
      id: ex.id,
      name: ex.name,
      nameRu: translateExerciseName(ex.name),
      gifUrl: ex.gifUrl,
      bodyPart: ex.bodyPart,
      target: ex.target,
      equipment: ex.equipment,
      secondaryMuscles: ex.secondaryMuscles || [],
      instructions: ex.instructions || []
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const grouped = {
      totalExercises: formattedExercises.length,
      lastUpdated: new Date().toISOString(),
      byBodyPart: {},
      byEquipment: {},
      exercises: formattedExercises
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç—è–º —Ç–µ–ª–∞
    formattedExercises.forEach(ex => {
      if (!grouped.byBodyPart[ex.bodyPart]) {
        grouped.byBodyPart[ex.bodyPart] = [];
      }
      grouped.byBodyPart[ex.bodyPart].push(ex.id);
    });

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
    formattedExercises.forEach(ex => {
      if (!grouped.byEquipment[ex.equipment]) {
        grouped.byEquipment[ex.equipment] = [];
      }
      grouped.byEquipment[ex.equipment].push(ex.id);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(grouped, null, 2), 'utf-8');

    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${OUTPUT_FILE}`);
    console.log(`üìä –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${formattedExercises.length}`);
    console.log(`üèãÔ∏è  –ì—Ä—É–ø–ø—ã –º—ã—à—Ü: ${Object.keys(grouped.byBodyPart).length}`);
    console.log(`üîß –í–∏–¥—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${Object.keys(grouped.byEquipment).length}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
    console.log('\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü:');
    Object.entries(grouped.byBodyPart)
      .sort((a, b) => b[1].length - a[1].length)
      .slice(0, 10)
      .forEach(([bodyPart, ids]) => {
        console.log(`   ${bodyPart.padEnd(20)} : ${ids.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
      });

    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:');
    console.log('   npm run exercises:search-gif "–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"');
    console.log('   npm run exercises:auto-match-gifs');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
function translateExerciseName(name) {
  const translations = {
    'bench press': '–∂–∏–º –ª–µ–∂–∞',
    'squat': '–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
    'deadlift': '—Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞',
    'pull up': '–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è',
    'push up': '–æ—Ç–∂–∏–º–∞–Ω–∏—è',
    'barbell': '—à—Ç–∞–Ω–≥–∞',
    'dumbbell': '–≥–∞–Ω—Ç–µ–ª–∏',
    'cable': '–±–ª–æ–∫',
    'machine': '—Ç—Ä–µ–Ω–∞–∂–µ—Ä',
    'bodyweight': '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
    // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };

  let translated = name.toLowerCase();
  for (const [eng, rus] of Object.entries(translations)) {
    translated = translated.replace(new RegExp(eng, 'gi'), rus);
  }
  
  return translated;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
fetchAllExercises();

