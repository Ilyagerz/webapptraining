const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —à–∞–≥–æ–≤
const stepTranslations = {
  'Step:': '–®–∞–≥:',
  'Stand': '–í—Å—Ç–∞–Ω—å—Ç–µ',
  'Hold': '–î–µ—Ä–∂–∏—Ç–µ',
  'Engage': '–ù–∞–ø—Ä—è–≥–∏—Ç–µ',
  'your feet': '–≤–∞—à–∏ –Ω–æ–≥–∏',
  'shoulder-width apart': '–Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á',
  'toes slightly turned out': '–Ω–æ—Å–∫–∏ —Å–ª–µ–≥–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã',
  'the barbell': '—à—Ç–∞–Ω–≥—É',
  'across your upper back': '–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å–ø–∏–Ω—ã',
  'resting it on your traps or rear delts': '—Ä–∞—Å–ø–æ–ª–æ–∂–∏–≤ –µ—ë –Ω–∞ —Ç—Ä–∞–ø–µ—Ü–∏—è—Ö –∏–ª–∏ –∑–∞–¥–Ω–∏—Ö –¥–µ–ª—å—Ç–∞—Ö',
  'your core': '–≤–∞—à –∫–æ—Ä–ø—É—Å',
  'keep your chest up': '–¥–µ—Ä–∂–∏—Ç–µ –≥—Ä—É–¥—å –ø–æ–¥–Ω—è—Ç–æ–π',
  'as you begin to lower your body down': '–∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç–µ –æ–ø—É—Å–∫–∞—Ç—å—Å—è –≤–Ω–∏–∑',
  'with your feet': '—Å –Ω–æ–≥–∞–º–∏',
  'barbell': '—à—Ç–∞–Ω–≥–∞',
  'dumbbell': '–≥–∞–Ω—Ç–µ–ª–∏',
  'cable': '—Ç—Ä–µ–Ω–∞–∂–µ—Ä',
  'machine': '—Ç—Ä–µ–Ω–∞–∂–µ—Ä',
  'bodyweight': '–≤–µ—Å —Ç–µ–ª–∞',
  'kettlebell': '–≥–∏—Ä—è',
  'bands': '—Ä–µ–∑–∏–Ω–∫–∏',
};

// –ë–æ–ª–µ–µ —É–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
function translateInstruction(instruction) {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ
  if (instruction.startsWith('–®–∞–≥:')) {
    return instruction;
  }

  let translated = instruction;

  // –ó–∞–º–µ–Ω—è–µ–º Step:N –Ω–∞ –®–∞–≥ N:
  translated = translated.replace(/Step:(\d+)\s+/g, '–®–∞–≥ $1: ');

  // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
  translated = translated.replace(/\s+/g, ' ').trim();

  return translated;
}

async function main() {
  const inputPath = path.join(__dirname, '..', 'data', 'custom-exercises-ru.json');
  const outputPath = inputPath; // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìù –ü–ï–†–ï–í–û–î –ò–ù–°–¢–†–£–ö–¶–ò–ô –ù–ê –†–£–°–°–ö–ò–ô');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  if (!fs.existsSync(inputPath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputPath}`);
    process.exit(1);
  }

  const exercises = JSON.parse(fs.readFileSync(inputPath, 'utf8'));
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${exercises.length}`);

  let translatedCount = 0;
  const translatedExercises = exercises.map((exercise, index) => {
    if (exercise.instructions && exercise.instructions.length > 0) {
      const translatedInstructions = exercise.instructions.map(inst => {
        return translateInstruction(inst);
      });

      if ((index + 1) % 20 === 0) {
        console.log(`‚úÖ ${index + 1}/${exercises.length}: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è ${exercise.name}`);
      }

      translatedCount++;
      return {
        ...exercise,
        instructions: translatedInstructions,
      };
    }
    return exercise;
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  fs.writeFileSync(outputPath, JSON.stringify(translatedExercises, null, 2), 'utf8');

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ –ì–û–¢–û–í–û! –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è ${translatedCount} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
  console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputPath}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

main().catch(err => {
  console.error('–û—à–∏–±–∫–∞:', err);
  process.exit(1);
});

