const https = require('https');
const fs = require('fs');
const path = require('path');

const API_BASE_URL = 'www.exercisedb.dev';
const GIFS_DIR = path.join(__dirname, '..', 'public', 'exercises', 'gifs');
const OUTPUT_JSON = path.join(__dirname, '..', 'data', 'custom-exercises.json');

// –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const muscleGroupRuToEn = {
  '–ì—Ä—É–¥—å': 'chest',
  '–°–ø–∏–Ω–∞': 'back',
  '–ü–ª–µ—á–∏': 'shoulders',
  '–ù–æ–≥–∏': 'legs',
  '–†—É–∫–∏': 'arms',
  '–ö–æ—Ä': 'abs',
  '–ö–∞—Ä–¥–∏–æ': 'cardio',
  '–í—Å–µ —Ç–µ–ª–æ': 'fullBody',
  '–û–ª–∏–º–ø–∏–π—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è': 'fullBody',
  '–î—Ä—É–≥–æ–µ': 'other',
};

const muscleGroupEnToRu = {
  'pectorals': '–ì—Ä—É–¥—å',
  'chest': '–ì—Ä—É–¥—å',
  'lats': '–°–ø–∏–Ω–∞',
  'upper back': '–°–ø–∏–Ω–∞',
  'lower back': '–°–ø–∏–Ω–∞',
  'back': '–°–ø–∏–Ω–∞',
  'delts': '–ü–ª–µ—á–∏',
  'shoulders': '–ü–ª–µ—á–∏',
  'quads': '–ù–æ–≥–∏',
  'glutes': '–ù–æ–≥–∏',
  'hamstrings': '–ù–æ–≥–∏',
  'calves': '–ù–æ–≥–∏',
  'legs': '–ù–æ–≥–∏',
  'biceps': '–†—É–∫–∏',
  'triceps': '–†—É–∫–∏',
  'forearms': '–†—É–∫–∏',
  'arms': '–†—É–∫–∏',
  'abs': '–ü—Ä–µ—Å—Å',
  'obliques': '–ü—Ä–µ—Å—Å',
  'core': '–ü—Ä–µ—Å—Å',
  'cardiovascular': '–ö–∞—Ä–¥–∏–æ',
};

const equipmentEnToRu = {
  'barbell': '–®—Ç–∞–Ω–≥–∞',
  'dumbbell': '–ì–∞–Ω—Ç–µ–ª–∏',
  'machine': '–¢—Ä–µ–Ω–∞–∂–µ—Ä',
  'cable': '–ö–∞–±–µ–ª—å',
  'body weight': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
  'bodyweight': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
  'kettlebell': '–ì–∏—Ä—è',
  'band': '–†–µ–∑–∏–Ω–∫–∞',
  'resistance band': '–†–µ–∑–∏–Ω–∫–∞',
  'smith machine': '–¢—Ä–µ–Ω–∞–∂–µ—Ä',
  'assisted': '–¢—Ä–µ–Ω–∞–∂–µ—Ä',
  'stability ball': '–§–∏—Ç–±–æ–ª',
  'plate': '–î–∏—Å–∫',
  '': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
};

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: API_BASE_URL,
      path: path,
      method: 'GET',
      headers: { 'Accept': 'application/json' }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            resolve(JSON.parse(data));
          } catch (error) {
            reject(new Error(`Parse error: ${error.message}`));
          }
        } else {
          reject(new Error(`HTTP ${res.statusCode}`));
        }
      });
    });

    req.on('error', reject);
    req.setTimeout(30000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
    req.end();
  });
}

function downloadFile(url, dest) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest);
    
    https.get(url, (response) => {
      if (response.statusCode === 301 || response.statusCode === 302) {
        return downloadFile(response.headers.location, dest)
          .then(resolve)
          .catch(reject);
      }

      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}`));
        return;
      }

      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(dest, () => {});
      reject(err);
    });
  });
}

async function searchExercise(name) {
  try {
    const query = encodeURIComponent(name);
    const path = `/api/v1/exercises/search?q=${query}&limit=1`;
    const response = await makeRequest(path);
    
    if (response.success && response.data && response.data.length > 0) {
      return response.data[0];
    }
  } catch (error) {
    console.error(`  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "${name}": ${error.message}`);
  }
  return null;
}

function translateMuscleGroup(muscles) {
  if (!muscles || muscles.length === 0) return '–ì—Ä—É–¥—å';
  const muscle = muscles[0].toLowerCase();
  for (const [key, value] of Object.entries(muscleGroupEnToRu)) {
    if (muscle.includes(key)) return value;
  }
  return '–î—Ä—É–≥–æ–µ';
}

function translateEquipment(equipment) {
  if (!equipment) return '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å';
  const eq = equipment.toLowerCase();
  for (const [key, value] of Object.entries(equipmentEnToRu)) {
    if (eq.includes(key)) return value;
  }
  return '–î—Ä—É–≥–æ–µ';
}

function parseExerciseList(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');
  
  const exercises = [];
  let currentGroup = '–î—Ä—É–≥–æ–µ';
  
  for (const line of lines) {
    const trimmed = line.trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!trimmed) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
    if (trimmed.endsWith(':')) {
      currentGroup = trimmed.slice(0, -1);
      console.log(`  –ì—Ä—É–ø–ø–∞: ${currentGroup}`);
      continue;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
    if (trimmed.startsWith('#') || trimmed.length < 3) continue;
    
    // –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    exercises.push({
      name: trimmed,
      group: currentGroup
    });
  }
  
  return exercises;
}

async function main() {
  try {
    const inputFile = process.argv[2] || path.join(__dirname, '..', 'ex.md');
    
    if (!fs.existsSync(inputFile)) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', inputFile);
      process.exit(1);
    }

    console.log('üìã –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑', inputFile);
    const exercises = parseExerciseList(inputFile);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è GIF
    if (!fs.existsSync(GIFS_DIR)) {
      fs.mkdirSync(GIFS_DIR, { recursive: true });
    }

    const results = [];
    let found = 0;
    let notFound = 0;

    for (let i = 0; i < exercises.length; i++) {
      const { name, group } = exercises[i];
      process.stdout.write(`[${i + 1}/${exercises.length}] ${name}...`);

      try {
        // –ò—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        const exercise = await searchExercise(name);
        
        if (!exercise) {
          console.log(' ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');
          notFound++;
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–∂–µ –¥–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
          await new Promise(resolve => setTimeout(resolve, 2000));
          continue;
        }

        // –°–∫–∞—á–∏–≤–∞–µ–º GIF
        let gifPath = '';
        if (exercise.gifUrl) {
          const gifFilename = `${exercise.exerciseId}.gif`;
          const gifFullPath = path.join(GIFS_DIR, gifFilename);
          
          if (!fs.existsSync(gifFullPath)) {
            try {
              await downloadFile(exercise.gifUrl, gifFullPath);
            } catch (error) {
              console.log(` ‚ö†Ô∏è  GIF –æ—à–∏–±–∫–∞: ${error.message}`);
            }
          }
          
          gifPath = `/exercises/gifs/${gifFilename}`;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –º—ã—à—Ü
        let muscleGroupRu = translateMuscleGroup(exercise.targetMuscles);
        
        // –ï—Å–ª–∏ –≤ —Ä—É—Å—Å–∫–æ–º —Å–ø–∏—Å–∫–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (muscleGroupRuToEn[group]) {
          muscleGroupRu = group;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const formatted = {
          id: exercise.exerciseId,
          name: exercise.name.charAt(0).toUpperCase() + exercise.name.slice(1),
          nameEn: exercise.name,
          category: 'strength',
          muscleGroup: muscleGroupRu,
          equipment: Array.isArray(exercise.equipments) 
            ? exercise.equipments.map(translateEquipment)
            : [translateEquipment(exercise.equipments?.[0])],
          instructions: exercise.instructions || [],
          gifUrl: gifPath,
          targetMuscles: exercise.targetMuscles || [],
          secondaryMuscles: exercise.secondaryMuscles || [],
          bodyParts: exercise.bodyParts || [],
          description: `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è ${muscleGroupRu}`,
          isCustom: false,
        };

        results.push(formatted);
        console.log(` ‚úÖ`);
        found++;

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2 —Å–µ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit)
        await new Promise(resolve => setTimeout(resolve, 2000));

      } catch (error) {
        console.log(` ‚ùå ${error.message}`);
        notFound++;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs.writeFileSync(OUTPUT_JSON, JSON.stringify(results, null, 2), 'utf-8');

    console.log(`\n\nüéâ –ì–æ—Ç–æ–≤–æ!`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${found}`);
    console.log(`   –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFound}`);
    console.log(`   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${OUTPUT_JSON}`);
    console.log(`   GIF —Ñ–∞–π–ª—ã: ${GIFS_DIR}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const groups = {};
    results.forEach(e => {
      groups[e.muscleGroup] = (groups[e.muscleGroup] || 0) + 1;
    });

    console.log('\nüìä –ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü:');
    Object.entries(groups)
      .sort((a, b) => b[1] - a[1])
      .forEach(([group, count]) => {
        console.log(`   ${group}: ${count}`);
      });

    console.log('\nüí° –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/custom-exercises.json');
    console.log('üí° GIF —Ñ–∞–π–ª—ã –≤ public/exercises/gifs/');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run build');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();

